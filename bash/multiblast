#!/bin/bash

### Written by Andrey Rozenberg (jaera at yandex.com), Ruhr-Universit√§t Bochum

### This program is free software: you can redistribute it and/or modify
### it under the terms of the GNU General Public License as published by
### the Free Software Foundation, either version 3 of the License, or
### (at your option) any later version.

### This program is distributed in the hope that it will be useful,
### but WITHOUT ANY WARRANTY; without even the implied warranty of
### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
### GNU General Public License for more details.

### You should have received a copy of the GNU General Public License
### along with this program.  If not, see <http://www.gnu.org/licenses/>.

timestart=$(date +"%s")

bar='===================================================================================================='
blk='                                                                                                    '
progformat='[%.*s%.*s] %d %%\r'
declare -a cmd
[ ! -z "$PBS_O_WORKDIR" ] && cd "$PBS_O_WORKDIR"

die() {
	echo $1 >&2
	exit 1
}

trap cleanup EXIT
cleanup() {
	trap '' INT TERM
	kill -TERM 0
	wait
	exit
}

standard_job() {
	local output=$1
	local beg=$2
	local end=$3
	"${cmd[@]}" -num_threads 1 -out "$output" -query <(awk -v beg="$beg" -v end="$end" '/^>/{n++}n>end{exit}n>beg' "$query")
}

progress_job() {
	local output=$1
	local beg=$2
	local chunk=$3
	echo "Records consumed:" >&2

	printf "$progformat" 100 "$blk" >&2

	"${cmd[@]}" -num_threads 1 -out "$output" -query <(awk \
		-v chunk=$chunk -v beg=$beg -v bar=" '$bar' " -v blk=" '$blk' " -v progprintf="printf '$progformat' " '
			BEGIN { k=100/chunk; b=beg*k; ival=1; if (k<1) ival=sprintf("%d",1/k) }
			/^>/{n++}n<=beg{next}{print;p=sprintf("%d",n*k-b);if(p>100)p=100}n%ival==0&&p-pold>.1{pold=p;r=100-p;system(progprintf p bar r blk p " >&2")}
		' "$query")
}

print_interval() {
	local beg=$1
	local end=$2
	printf "Sequences [%d; %d]\n" $((beg+1)) $end >&2
}

## test whether the command is correct
[[ "$1" =~ blast* ]] || die "Not a blast program '$1'"
command -v "$1" >/dev/null 2>&1 || die "'$1' not found"

num_threads=1
out=""

## grasp the -query argument to replace it with own pipe
for ((j=$#;j>0;j--)); do
	case "${!j}" in
		'-query' | '-num_threads' | '-out' )
			i=$((j-1))
			k=$((j+1))
			l=$((j+2))
			opt=${!j//-/}
			eval $opt=\${!k}
			set -- "${@:1:i}" "${@:l}"
		;;
	esac
done

cmd=("$@")

## check the num_threads and availability of the paths
[[ "$num_threads" =~ ^[1-9][0-9]*$ ]] || die "-num_threads is expected to be an unsigned integer"
[ -f "$query" ]                       || die 'Input file not found'

[ -z "$out" ] && die "No output prefix specified"

## calculate the size of individual query
n=$(awk '/^>/{n++}END{print n}' "$query")
((n>0)) || die 'Input file seems to be empty'
chunk=$((n/num_threads))
if [[ $chunk -eq 0 ]]; then
	chunk=n
	num_threads=1
	echo "Warning: number of sequences is lower than the number of the threads, reducing to one thread" >&2
fi

printf "The chosen chunk size is %d sequences\n" $chunk >&2

if [ ! -z "$PBS_ARRAYID" ]; then
	# if we are running on a cluster
	[[ "$PBS_ARRAYID" -gt "$num_threads" ]] && die "Job array id is greater than the number of the requested threads"
	out_file="$out.$PBS_ARRAYID-$num_threads"
	[ -s "$out_file" ] && die "$out_file already exists, exiting"
	echo "Output file for this job:" >&2
	echo "$out_file" >&2
	beg=$((chunk*(PBS_ARRAYID-1)))
	if [[ "$PBS_ARRAYID" -eq "$num_threads" ]]; then
		end=$n
	else
		end=$((chunk*PBS_ARRAYID))
	fi
	print_interval $beg $end
	standard_job "$out_file" $beg $end
else
	# if we are running locally
	for ((i=1;i<=num_threads;i++)); do
		out_file="$out.$i-$num_threads"
		[ -s "$out_file" ] && die "$out_file already exists: rename or relocate it first"
	done
	echo "Output files:" >&2
	beg=0
	## launch the blast tasks in the background
	## individual sequences are piped to blast
	for ((i=1;i<num_threads;i++)); do
		out_file="$out.$i-$num_threads"
		echo "$out_file" >&2
		end=$((chunk*i))
		print_interval $beg $end
		standard_job "$out_file" $beg $end &
		beg=$end
	done
	## one of the processes will also monitor the number of the consumed sequences
	echo "$out.$num_threads-$num_threads" >&2
	print_interval $beg $n
	echo >&2
	progress_job "$out.$num_threads-$num_threads" $beg $chunk
	wait
	printf "$progformat\n" 100 "$bar" 0 0 100 >&2
fi

timeblast=$(date +"%s")
echo 'Spent '$((timeblast-timestart))' sec' >&2
